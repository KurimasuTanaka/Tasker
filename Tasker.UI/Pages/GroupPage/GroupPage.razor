@page "/group/{GroupId:long}"
@using System.Security.Claims
@using Tasker.UI.Pages.Dashboard
@attribute [Authorize]

@inject IGroupsManager _groupsManager
@inject IDialogService DialogService

<div class="d-flex">
    <MudText Typo="Typo.h4">@group?.Name</MudText>
    <AuthorizeView Roles="@($"{GroupId}:Manager, {GroupId}:Admin")">
        <Authorized>
            <MudIconButton Icon="@Icons.Material.Filled.Settings" OnClick="OpenGroupEditDialog" />
        </Authorized>
    </AuthorizeView>
</div>
<MudDivider />
<AuthorizeView Roles="@($"{GroupId}:Admin")">
    <Authorized>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenUserAdditionDialog" Size="Size.Large" Class="p-3">Add User</MudButton>
    </Authorized>
</AuthorizeView>

<MudText Typo="Typo.h6">In group:</MudText>
@foreach (var member in group.UserParticipations)
{
    <MudText Typo="Typo.body1">@member.User.FirstName @member.User.LastName</MudText>
}
<MudDivider />
<AuthorizeView Roles="@($"{GroupId}:Manager, {GroupId}:Admin")">
    <Authorized>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenTaskDialog" Size="Size.Large" Class="p-3">Add Task</MudButton>
    </Authorized>
</AuthorizeView>

<MudTabs Elevation="2" PanelClass="pa-6">
    <MudTabPanel Text="Group tasks">

        @foreach (Domain.Assignment task in group.Assignments)
        {
            <Assignment assignment="task" group="group" />
        }
    </MudTabPanel>
    <MudTabPanel Text="My tasks">
        @foreach (Domain.Assignment task in group.Assignments.Where(a => a.UserAssignments.
                Select(p => p.User.UserIdentity).
                Contains(CurrentUser.UserIdentity)))
        {
            <Assignment assignment="task" group="group" />
        }
    </MudTabPanel>
</MudTabs>

@code {
    [Parameter] public long GroupId { get; set; }
    [CascadingParameter] public User CurrentUser { get; set; } = default!;
    private Group group = new();
    private string newUserId = string.Empty;

    private Task OpenUserAdditionDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, };
        var dialogParameters = new DialogParameters { { "GroupId", GroupId } };

        return DialogService.ShowAsync<AddUserDialog>("Add new user", dialogParameters, options);
    }
    protected override async Task OnInitializedAsync()
    {
        group = await _groupsManager.GetGroupById(GroupId);
    }
    private async Task OpenTaskDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, };
        var dialogParameters = new DialogParameters { { "GroupId", GroupId } };

        await DialogService.ShowAsync<CreateTaskDialog>("Simple Dialog", dialogParameters, options);
    }

    public async Task RefreshGroup(Group group)
    {
        this.group = group;
        StateHasChanged();
    }

    private async Task OpenGroupEditDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, };
        var dialogParameters = new DialogParameters { 
            { "group", group },
            { "UpdateGroupCallback", EventCallback.Factory.Create<Group>(this, RefreshGroup) }
         };

        await DialogService.ShowAsync<GroupEditDialog>("Edit group", dialogParameters, options);

    }
}