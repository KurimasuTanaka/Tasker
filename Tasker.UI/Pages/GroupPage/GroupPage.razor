@page "/group/{GroupId:long}"
@attribute [Authorize]

@inject AuthenticationStateProvider _authenticationStateProvider
@inject IGroupsManager _groupsManager
@inject IDialogService DialogService

<MudText Typo="Typo.h4">@group?.Name</MudText>
<MudDivider />
<AuthorizeView Roles="@($"{GroupId}:Admin")">
    <Authorized>
        <MudButton OnClick="OpenDialogAsync">Add User</MudButton>

    </Authorized>
</AuthorizeView>

<MudText Typo="Typo.h6">In group:</MudText>
@foreach (var member in group.Participants)
{
    <MudText Typo="Typo.body1">@member.User.FirstName @member.User.LastName</MudText>
}
<MudDivider />


<MudText Typo="Typo.h5">Task:</MudText>
<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenTaskDialog">Add Task</MudButton>

@foreach (var task in group.Assignments)
{
    <Assignment assignment="new DataAccess.Assignment(task)" group="group" />
}

@code {
    [Parameter]
    public long GroupId { get; set; }
    private Group group = new();
    private string newUserId = string.Empty;

    private Task OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, };
        var dialogParameters = new DialogParameters { { "GroupId", GroupId } };

        return DialogService.ShowAsync<AddUserDialog>("Simple Dialog", dialogParameters, options);
    }
    protected override async Task OnInitializedAsync()
    {
        var user = (await _authenticationStateProvider.GetAuthenticationStateAsync()).User;
        group = await _groupsManager.GetGroupById(GroupId);
    }
    private async Task OpenTaskDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, };
        var dialogParameters = new DialogParameters { { "GroupId", GroupId } };

        await DialogService.ShowAsync<CreateTaskDialog>("Simple Dialog", dialogParameters, options);
    }
}
