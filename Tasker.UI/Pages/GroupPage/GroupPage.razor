@page "/group/{GroupId:long}"
@using System.Security.Claims
@using Tasker.UI.Pages.Dashboard
@using Tasker.UI.Pages.GroupPage.Assignment

@inject IGroupServiceUI _groupServiceUI
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IUserServiceUI _userServiceUI


@*Header*@
<div class="d-flex align-center">
    <MudText Typo="Typo.h4">@group?.Name</MudText>
    <AuthorizeView Roles="@($"{GroupId}:Manager, {GroupId}:Admin")">
        <Authorized>
            <MudIconButton Icon="@Icons.Material.Filled.Settings" OnClick="OpenGroupEditDialog" />
        </Authorized>
    </AuthorizeView>
</div>

@*User buttons*@
<AuthorizeView Roles="@($"{GroupId}:Admin")">
    <Authorized>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenUserAdditionDialog" class="ma-3">Add User
        </MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenChangeUserRoleDialog" class="ma-3">Change
            User Role</MudButton>
    </Authorized>
</AuthorizeView>

<UserListComponent Users="group.UserParticipations.Select(up => up.User).ToList()" Title="Group members:" />

<MudDivider />
<AuthorizeView Roles="@($"{GroupId}:Manager, {GroupId}:Admin")">
    <Authorized>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenTaskDialog" class="ma-3">Add Task
        </MudButton>
    </Authorized>
</AuthorizeView>

@*Tabs for group tasks and personal tasks*@
<MudTabs Elevation="2" PanelClass="pa-6" Outlined="true" Rounded="true" ApplyEffectsToContainer="true">
    <MudTabPanel Text="Group tasks">

        @foreach (Domain.Assignment task in group.Assignments)
        {
            <Assignment assignment="task" group="group" OnAssignmentDeleted="RefreshGroupOnAssignmentDeleted" />
        }
    </MudTabPanel>
    <MudTabPanel Text="My tasks">

        @foreach (Domain.Assignment task in group.GetUserAssignments(newUserId))
        {
            <Assignment assignment="task" group="group" OnAssignmentDeleted="RefreshGroupOnAssignmentDeleted" />
        }
    </MudTabPanel>
</MudTabs>

@code {
    [Parameter] public long GroupId { get; set; }
    [Parameter] public User? CurrentUser { get; set; }
    private Group group = new();
    private string newUserId = string.Empty;

    private Task OpenUserAdditionDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialogParameters = new DialogParameters {
{ "GroupId", GroupId },
{ "OnUserAdded", EventCallback.Factory.Create<Domain.Group>(this, RefreshGroup) }
};

        return DialogService.ShowAsync<AddUserDialog>("Add new user", dialogParameters, options);
    }
    protected override async Task OnInitializedAsync()
    {
        ClaimsPrincipal? user = (await _authenticationStateProvider.GetAuthenticationStateAsync()).User;
        string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value!;

        try
        {
            CurrentUser = await _userServiceUI.GetUserById(userId);
            group = await _groupServiceUI.GetGroupById(GroupId);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
            group = new Group { Name = "Failed to load group and user" };
        }
    }
    private async Task OpenTaskDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialogParameters = new DialogParameters {
{ "GroupId", GroupId },
{ "OnTaskCreated", EventCallback.Factory.Create<Domain.Assignment>(this, RefreshGroup) } };

        await DialogService.ShowAsync<CreateAssignmentDialog>("Simple Dialog", dialogParameters, options);
    }

    public void RefreshGroup(Domain.Assignment newAssignment)
    {
        this.group.Assignments.Add(newAssignment);
        StateHasChanged();
    }

    public void RefreshGroup(Group group)
    {
        this.group = group;
        StateHasChanged();
    }

    public void RefreshGroupOnAssignmentDeleted(long assignmentId)
    {
        var assignment = group.Assignments.FirstOrDefault(a => a.AssignmentId == assignmentId);
        if (assignment != null)
        {
            group.Assignments.Remove(assignment);
            StateHasChanged();
        }
    }


    private async Task OpenGroupEditDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, };
        var dialogParameters = new DialogParameters {
{ "group", group },
{ "OnGroupUpdated", EventCallback.Factory.Create<Group>(this, RefreshGroup) }
};

        await DialogService.ShowAsync<GroupEditDialog>("Edit group", dialogParameters, options);

    }
    private async Task OpenChangeUserRoleDialog(MouseEventArgs args)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, };
        var dialogParameters = new DialogParameters {
{ "Group", group },

};

        await DialogService.ShowAsync<ChangeUserRoleDialog>("Change user role", dialogParameters, options);
    }
}