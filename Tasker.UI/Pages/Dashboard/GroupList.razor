@using Tasker.UI.Services
@inject IGroupServiceUI _groupServiceUI
@inject NavigationManager NavigationManager

<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="CreateGroup">Create Group</MudButton>


@foreach (var group in _groups)
{
    <MudCard Outlined="true" Style="margin-top:10px;">
        <MudCardContent>
            <MudText>@group.Name</MudText>
            <MudText Typo="Typo.body2">Users: @group.UserParticipations.Count</MudText>
            <MudText Typo="Typo.body2">Task: @group.GetNumberOfUncompletedAssignments()</MudText>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick="() => OpenGroup(group.GroupId)">Open
            </MudButton>
            <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick="() => DeleteGroup(group.GroupId)">Delete
            </MudButton>
        </MudCardActions>
    </MudCard>

}

@code {
    private List<Group> _groups = new();

    protected override async Task OnInitializedAsync()
    {
        _groups = await _groupServiceUI.GetAllGroups();
    }
    private async Task CreateGroup(MouseEventArgs args)
    {
        await _groupServiceUI.CreateGroup("New Group" + (_groups.Count + 1).ToString());
        _groups = await _groupServiceUI.GetAllGroups();

        StateHasChanged();
    }
    private void OpenGroup(long groupId)
    {
        NavigationManager.NavigateTo($"/group/{groupId}");
    }

    private async Task DeleteGroup(long groupId)
    {
        await _groupServiceUI.DeleteGroup(groupId);
        _groups.RemoveAll(g => g.GroupId == groupId);
        StateHasChanged();
    }
}